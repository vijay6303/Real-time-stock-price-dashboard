"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/stock/[symbol]",{

/***/ "./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateChange: function() { return /* binding */ calculateChange; },\n/* harmony export */   cn: function() { return /* binding */ cn; },\n/* harmony export */   formatCurrency: function() { return /* binding */ formatCurrency; },\n/* harmony export */   formatDate: function() { return /* binding */ formatDate; },\n/* harmony export */   formatPercentage: function() { return /* binding */ formatPercentage; },\n/* harmony export */   formatTime: function() { return /* binding */ formatTime; },\n/* harmony export */   formatTimeForDisplay: function() { return /* binding */ formatTimeForDisplay; },\n/* harmony export */   formatVolume: function() { return /* binding */ formatVolume; },\n/* harmony export */   transformTimeSeriesData: function() { return /* binding */ transformTimeSeriesData; }\n/* harmony export */ });\nfunction formatCurrency(value) {\n    // Handle null, undefined, NaN, and Infinity values\n    if (typeof value !== \"number\" || !isFinite(value)) {\n        return \"$0.00\";\n    }\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n    }).format(value);\n}\nfunction formatPercentage(value) {\n    // Handle null, undefined, NaN, and Infinity values\n    if (typeof value !== \"number\" || !isFinite(value)) {\n        return \"+0.00%\";\n    }\n    const sign = value >= 0 ? \"+\" : \"\";\n    return \"\".concat(sign).concat(value.toFixed(2), \"%\");\n}\nfunction formatVolume(value) {\n    // Handle null, undefined, NaN, and Infinity values\n    if (typeof value !== \"number\" || !isFinite(value) || value <= 0) {\n        return \"0\";\n    }\n    if (value >= 1000000000) {\n        return \"\".concat((value / 1000000000).toFixed(2), \"B\");\n    }\n    if (value >= 1000000) {\n        return \"\".concat((value / 1000000).toFixed(2), \"M\");\n    }\n    if (value >= 1000) {\n        return \"\".concat((value / 1000).toFixed(2), \"K\");\n    }\n    return value.toString();\n}\nfunction formatTime(date) {\n    if (!date || !(date instanceof Date) || isNaN(date.getTime())) {\n        return new Date().toLocaleTimeString(\"en-US\", {\n            hour12: true,\n            hour: \"numeric\",\n            minute: \"2-digit\",\n            second: \"2-digit\"\n        });\n    }\n    return date.toLocaleTimeString(\"en-US\", {\n        hour12: true,\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        second: \"2-digit\"\n    });\n}\n// Safe time formatter that prevents hydration mismatches\nfunction formatTimeForDisplay(timestamp) {\n    // For SSR safety, return a placeholder during server render\n    if (false) {}\n    try {\n        const date = timestamp ? new Date(timestamp) : new Date();\n        return date.toLocaleTimeString(\"en-US\", {\n            hour12: true,\n            hour: \"numeric\",\n            minute: \"2-digit\",\n            second: \"2-digit\"\n        });\n    } catch (error) {\n        return \"--:--:-- --\";\n    }\n}\nfunction formatDate(date) {\n    let dateObj;\n    if (typeof date === \"string\") {\n        dateObj = new Date(date);\n    } else if (date instanceof Date) {\n        dateObj = date;\n    } else {\n        dateObj = new Date();\n    }\n    // Check if date is valid\n    if (isNaN(dateObj.getTime())) {\n        dateObj = new Date();\n    }\n    return dateObj.toLocaleDateString(\"en-US\", {\n        month: \"short\",\n        day: \"numeric\"\n    });\n}\nfunction transformTimeSeriesData(data) {\n    // If it's already ChartDataPoint array, return it\n    if (Array.isArray(data)) {\n        return data.length > 0 ? data : [];\n    }\n    if (!data || typeof data !== \"object\") {\n        return [];\n    }\n    try {\n        return Object.entries(data).map((param)=>{\n            let [date, values] = param;\n            // Safely parse values with fallbacks\n            const price = parseFloat((values === null || values === void 0 ? void 0 : values[\"4. close\"]) || \"0\") || 0;\n            const volume = parseInt((values === null || values === void 0 ? void 0 : values[\"5. volume\"]) || \"0\") || 0;\n            return {\n                date: formatDate(date),\n                price,\n                volume\n            };\n        }).filter((item)=>item.price > 0) // Filter out invalid entries\n        .reverse().slice(-30); // Last 30 days\n    } catch (error) {\n        console.error(\"Error transforming time series data:\", error);\n        return [];\n    }\n}\nfunction calculateChange(current, previous) {\n    // Handle invalid inputs\n    if (typeof current !== \"number\" || typeof previous !== \"number\" || !isFinite(current) || !isFinite(previous) || previous === 0) {\n        return {\n            change: 0,\n            changePercent: 0\n        };\n    }\n    const change = current - previous;\n    const changePercent = change / previous * 100;\n    return {\n        change: Math.round(change * 100) / 100,\n        changePercent: Math.round(changePercent * 100) / 100\n    };\n}\nfunction cn() {\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    return classes.filter(Boolean).join(\" \");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/utils.ts\n"));

/***/ })

});